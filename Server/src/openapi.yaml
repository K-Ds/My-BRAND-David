openapi: 3.0.1

securitySchemes:
  bearerAuth: # arbitrary name for the security scheme
    type: "http"
    scheme: "bearer"
    bearerFormat: "JWT"

paths:
  /api/posts:
    get:
      summary: Use to request all posts
      tags:
        - Posts
      produces:
        - application/json
      responses:
        200:
          description: A successful response of all posts
        500:
          description: Server Error

    post:
      summary: Use to post a new post to db
      tags:
        - Posts
      consumes:
        - multipart/form-data

      security:
        - bearerAuth: []

      parameters:
        - in: header
          name: x-auth-token
          description: The user jwt token
          schema:
            type: string

        - in: formData
          name: title
          description: The post Title.
          exmaple: Example title
          required: true
          type: string

        - in: formData
          name: author
          description: The author of the post.
          exmaple: John Doe
          required: true
          type: string

        - in: formData
          name: image
          description: The image of post.
          required: true
          type: file

        - in: formData
          name: body
          description: The body of post.
          exmaple: lorem ipsum dolor
          required: true
          type: string

      responses:
        201:
          description: A successful post
        401:
          description: Not logged in
        403:
          description: Not an Admin.
        400:
          description: some required parameters not passed.
        503:
          description: Service not available.

  /api/posts/{postId}:
    get:
      summary: Returns a post by ID.
      tags:
        - Posts
      parameters:
        - in: path
          name: postId
          required: true
          description: The ID of the post to return.
          schema:
            type: string
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: object
        400:
          description: Invalid ID.
        404:
          description: Blog not found.
        500:
          description: Server Error.

    put:
      summary: Use to update/edit a post
      tags:
        - Posts
      consumes:
        - multipart/form-data
      security:
        - bearerAuth: []

      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to return.
          schema:
            type: string

        - in: formData
          name: title
          description: The title of the post
          type: string
          required: true
          example: Title example

        - in: formData
          name: author
          description: The author of the post
          type: string
          required: true
          example: Jane Doe

        - in: formData
          name: image
          description: The Image of the post
          type: file
          required: true

        - in: formData
          name: body
          description: The body of the post
          type: string
          required: true
          example: lorem ipsum dolor sit amet

        - in: header
          name: x-auth-token
          description: The user jwt token
          schema:
            type: object
            required:
              - x-auth-token
            properties:
              x-auth-token:
                type: string

      responses:
        201:
          description: A successful post
        401:
          description: Not logged in
        403:
          description: Not an Admin.
        400:
          description: some required parameters not passed.
        404:
          description: Post not found.
        503:
          description: Service not available.

    delete:
      summary: Use to delete post by id
      tags:
        - Posts
      consumes:
        - application/json
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to return.
          schema:
            type: string

        - in: header
          name: x-auth-token
          description: The user jwt token
          schema:
            type: object
            required:
              - x-auth-token
            properties:
              x-auth-token:
                type: string

      responses:
        204:
          description: A successful delete of the post.
        401:
          description: Not logged in
        403:
          description: Not Admin
        400:
          description: Invalid ID.
        404:
          description: Blog not found.
